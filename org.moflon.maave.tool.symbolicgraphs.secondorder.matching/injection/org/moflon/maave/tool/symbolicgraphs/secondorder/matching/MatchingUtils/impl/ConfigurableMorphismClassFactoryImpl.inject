
import org.moflon.maave.tool.symbolicgraphs.secondorder.matching.MatchingUtils.MatchingUtilsFactory;
import org.moflon.maave.tool.symbolicgraphs.secondorder.matching.MatchingUtils.FormulaMode;
import org.moflon.maave.tool.symbolicgraphs.secondorder.matching.MatchingUtils.MorMappingMode;

partial class ConfigurableMorphismClassFactoryImpl {

@members <--

   private MorMappingMode getMorMappingModeFromString(String modeString)
   {
      switch (modeString)
      {
      case "I":
         return MorMappingMode.INJ;
      case "B":
         return MorMappingMode.BIJ;
      case "S":
         return MorMappingMode.SURJ;
      case "*":
         return MorMappingMode.ARBIT;
      default:
         throw new RuntimeException("Value \"" + modeString + "\" not allowed");
      }
   }

   private FormulaMode getFormulaModeFromString(String modeString)
   {
      switch (modeString)
      {
      case "=>":
         return FormulaMode.IMPL;
      case "<=>":
         return FormulaMode.BIIMPL;
      case "*":
         return FormulaMode.ARBIT;
      case "Proj":
         return FormulaMode.PROJ;
      default:
         throw new RuntimeException("Value \"" + modeString + "\" not allowed");
      }
   }
   
-->

@model createMorphismClass (String graphNodeMode, String labelNodeMode, String graphEdgeMode, String labelEdgeMode, String formulaMode) <--

      ConfigurableMorphismClass morphismClass = MatchingUtilsFactory.eINSTANCE.createConfigurableMorphismClass();
      morphismClass.setGraphNodeMode(getMorMappingModeFromString(graphNodeMode));
      morphismClass.setLabelNodeMode(getMorMappingModeFromString(labelNodeMode));
      morphismClass.setGraphEdgeMode(getMorMappingModeFromString(graphEdgeMode));
      morphismClass.setLabelEdgeMode(getMorMappingModeFromString(labelEdgeMode));
      morphismClass.setFormulaMode(getFormulaModeFromString(formulaMode));

      return morphismClass;
-->

}