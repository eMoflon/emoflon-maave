
import org.eclipse.emf.ecore.EPackage.Registry;

import org.gervarro.democles.constraint.emf.EMFConstraintModule;

import org.gervarro.democles.interpreter.PatternMatcherModule;
import org.gervarro.democles.operation.emf.ReflectiveInterpreterOperationBuilder;
import org.gervarro.democles.plan.WeightedOperationBuilder;
import org.gervarro.democles.plan.combiner.InterpreterCombiner;
import org.gervarro.democles.plan.common.DefaultAlgorithm;
import org.gervarro.democles.runtime.RemappingOperation;
import org.gervarro.democles.runtime.Scheduler;
import org.gervarro.democles.specification.emf.EMFPatternBuilder;
import org.gervarro.democles.specification.emf.SpecificationPackage;
import org.gervarro.democles.specification.emf.constraint.EMFTypeModule;
import org.gervarro.democles.specification.emf.constraint.emf.emf.EMFTypePackage;
import org.gervarro.democles.specification.impl.DefaultPattern;
import org.gervarro.democles.specification.impl.DefaultPatternBody;
import org.gervarro.democles.specification.impl.DefaultPatternFactory;
import org.moflon.maave.tool.symbolicgraphs.secondorder.matching.FOTransformationResult;
import org.moflon.maave.tool.symbolicgraphs.secondorder.matching.MatchingFactory;
import org.moflon.maave.tool.symbolicgraphs.secondorder.matching.MatchingPackage;
import org.moflon.maave.tool.symbolicgraphs.secondorder.matching.MorphismFinderFactory;
import org.moflon.maave.tool.symbolicgraphs.secondorder.matching.operations.EGraphGraphWeightedOperationBuilder;
import org.moflon.maave.tool.symbolicgraphs.secondorder.matching.operations.EGraphInterpreterOperationBuilder;
import org.moflon.maave.tool.symbolicgraphs.secondorder.matching.emf.constraint.SymbolicGraphConstraintModule;
import org.moflon.maave.tool.symbolicgraphs.secondorder.matching.emf.constraint.SymbolicGraphTypeModule;
import org.moflon.maave.tool.symbolicgraphs.SymbolicGraphs.SymbolicGraph;
import org.moflon.maave.tool.symbolicgraphs.SymbolicGraphs.SymbolicGraphsPackage;

partial class MorphismFinderFactoryImpl {



@model createInjectiveEGraphMorphismFinder (SymbolicGraph symbolicGraph) <--

      FOTransformationResult foResult = MatchingFactory.eINSTANCE.createFOTransformationResult();
      foResult.init(symbolicGraph);

      SpecificationPackage.eINSTANCE.getSpecificationFactory();
      EMFTypePackage.eINSTANCE.getEMFTypeFactory();
      SymbolicGraphsPackage.eINSTANCE.getClass();

      // 2) Prepares an internal representation for the pattern
      EMFPatternBuilder<DefaultPattern, DefaultPatternBody> patternBuilder = new EMFPatternBuilder<DefaultPattern, DefaultPatternBody>(
            new DefaultPatternFactory());
      EMFConstraintModule emfTypeModule = new EMFConstraintModule((Registry) null);
      EMFTypeModule internalEMFTypeModule = new EMFTypeModule(emfTypeModule);
      patternBuilder.addVariableTypeSwitch(internalEMFTypeModule.getVariableTypeSwitch());
      patternBuilder.addConstraintTypeSwitch(internalEMFTypeModule.getConstraintTypeSwitch());

      SymbolicGraphConstraintModule symbolicGraphConstraintModule = new SymbolicGraphConstraintModule((Registry) null);
      SymbolicGraphTypeModule symbolicGraphTypeModule = new SymbolicGraphTypeModule(symbolicGraphConstraintModule);
      patternBuilder.addVariableTypeSwitch(symbolicGraphTypeModule.getVariableTypeSwitch());

      // 3) Initializes the pattern matcher module
      WeightedOperationBuilder<RemappingOperation> builder = new EGraphGraphWeightedOperationBuilder<RemappingOperation>();
      DefaultAlgorithm<InterpreterCombiner, RemappingOperation> searchPlanAlgorithm = new DefaultAlgorithm<InterpreterCombiner, RemappingOperation>(builder);
      PatternMatcherModule patternMatcherModule = new PatternMatcherModule();
      patternMatcherModule.setAlgorithm(searchPlanAlgorithm);
      patternMatcherModule.setScheduler(new Scheduler());

      ReflectiveInterpreterOperationBuilder emfReflectiveOperationBuilder = new ReflectiveInterpreterOperationBuilder(emfTypeModule);
      patternMatcherModule.addOperationBuilder(emfReflectiveOperationBuilder);

      EGraphInterpreterOperationBuilder eGraphInterpreterOperationBuilder = new EGraphInterpreterOperationBuilder(symbolicGraphConstraintModule);
      patternMatcherModule.addOperationBuilder(eGraphInterpreterOperationBuilder);
      // TODO revert engine.addOperationBuilder(new SpecificationPackageOperationBuilder());
      // 4) Creates the interpretable pattern matcher
      DefaultPattern internalPatternSpecification = patternBuilder.build(foResult.getFirstOrderPattern());
      org.gervarro.democles.interpreter.Pattern patternRuntime = patternMatcherModule.build(internalPatternSpecification);
      CInjectiveEGraphMorphismFinder morphismFinder = MatchingFactory.eINSTANCE.createCInjectiveEGraphMorphismFinder();
      morphismFinder.setFOTransformationResult(foResult);
      ((CInjectiveEGraphMorphismFinderImpl) morphismFinder).patternRuntime = patternRuntime;
      return morphismFinder;
-->

@model createInjectiveSymbolicGraphMorphismFinder (SymbolicGraph symbolicGraph) <--

      FOTransformationResult foResult = MatchingFactory.eINSTANCE.createFOTransformationResult();
      foResult.init(symbolicGraph);

      SpecificationPackage.eINSTANCE.getSpecificationFactory();
      EMFTypePackage.eINSTANCE.getEMFTypeFactory();
      SymbolicGraphsPackage.eINSTANCE.getClass();

      // 2) Prepares an internal representation for the pattern
      EMFPatternBuilder<DefaultPattern, DefaultPatternBody> patternBuilder = new EMFPatternBuilder<DefaultPattern, DefaultPatternBody>(
            new DefaultPatternFactory());
      EMFConstraintModule emfTypeModule = new EMFConstraintModule((Registry) null);
      EMFTypeModule internalEMFTypeModule = new EMFTypeModule(emfTypeModule);
      patternBuilder.addVariableTypeSwitch(internalEMFTypeModule.getVariableTypeSwitch());
      patternBuilder.addConstraintTypeSwitch(internalEMFTypeModule.getConstraintTypeSwitch());

      SymbolicGraphConstraintModule symbolicGraphConstraintModule = new SymbolicGraphConstraintModule((Registry) null);
      SymbolicGraphTypeModule symbolicGraphTypeModule = new SymbolicGraphTypeModule(symbolicGraphConstraintModule);
      patternBuilder.addVariableTypeSwitch(symbolicGraphTypeModule.getVariableTypeSwitch());

      // 3) Initializes the pattern matcher module
      WeightedOperationBuilder<RemappingOperation> builder = new EGraphGraphWeightedOperationBuilder<RemappingOperation>();
      DefaultAlgorithm<InterpreterCombiner, RemappingOperation> searchPlanAlgorithm = new DefaultAlgorithm<InterpreterCombiner, RemappingOperation>(builder);
      PatternMatcherModule patternMatcherModule = new PatternMatcherModule();
      patternMatcherModule.setAlgorithm(searchPlanAlgorithm);
      patternMatcherModule.setScheduler(new Scheduler());

      ReflectiveInterpreterOperationBuilder emfReflectiveOperationBuilder = new ReflectiveInterpreterOperationBuilder(emfTypeModule);
      patternMatcherModule.addOperationBuilder(emfReflectiveOperationBuilder);

      EGraphInterpreterOperationBuilder eGraphInterpreterOperationBuilder = new EGraphInterpreterOperationBuilder(symbolicGraphConstraintModule);
      patternMatcherModule.addOperationBuilder(eGraphInterpreterOperationBuilder);
      // TODO revert engine.addOperationBuilder(new SpecificationPackageOperationBuilder());
      // 4) Creates the interpretable pattern matcher
      DefaultPattern internalPatternSpecification = patternBuilder.build(foResult.getFirstOrderPattern());
      org.gervarro.democles.interpreter.Pattern patternRuntime = patternMatcherModule.build(internalPatternSpecification);
      SInjectiveSymbolicGraphMorphismFinder morphismFinder = MatchingFactory.eINSTANCE.createSInjectiveSymbolicGraphMorphismFinder();
      morphismFinder.setFOTransformationResult(foResult);
      ((CInjectiveEGraphMorphismFinderImpl) morphismFinder).patternRuntime = patternRuntime;
      return morphismFinder;
-->

@model createMorphismFinder (SymbolicGraph pattern, MorphismClass morphismClass) <--

      FOTransformationResult foResult = MatchingFactory.eINSTANCE.createFOTransformationResult();
      foResult.init(pattern);

      SpecificationPackage.eINSTANCE.getSpecificationFactory();
      EMFTypePackage.eINSTANCE.getEMFTypeFactory();
      SymbolicGraphsPackage.eINSTANCE.getClass();

      // 2) Prepares an internal representation for the pattern
      EMFPatternBuilder<DefaultPattern, DefaultPatternBody> patternBuilder = new EMFPatternBuilder<DefaultPattern, DefaultPatternBody>(
            new DefaultPatternFactory());
      EMFConstraintModule emfTypeModule = new EMFConstraintModule((Registry) null);
      EMFTypeModule internalEMFTypeModule = new EMFTypeModule(emfTypeModule);
      patternBuilder.addVariableTypeSwitch(internalEMFTypeModule.getVariableTypeSwitch());
      patternBuilder.addConstraintTypeSwitch(internalEMFTypeModule.getConstraintTypeSwitch());

      SymbolicGraphConstraintModule symbolicGraphConstraintModule = new SymbolicGraphConstraintModule((Registry) null);
      SymbolicGraphTypeModule symbolicGraphTypeModule = new SymbolicGraphTypeModule(symbolicGraphConstraintModule);
      patternBuilder.addVariableTypeSwitch(symbolicGraphTypeModule.getVariableTypeSwitch());

      // 3) Initializes the pattern matcher module
      WeightedOperationBuilder<RemappingOperation> builder = new EGraphGraphWeightedOperationBuilder<RemappingOperation>();
      DefaultAlgorithm<InterpreterCombiner, RemappingOperation> searchPlanAlgorithm = new DefaultAlgorithm<InterpreterCombiner, RemappingOperation>(builder);
      PatternMatcherModule patternMatcherModule = new PatternMatcherModule();
      patternMatcherModule.setAlgorithm(searchPlanAlgorithm);
      patternMatcherModule.setScheduler(new Scheduler());

      ReflectiveInterpreterOperationBuilder emfReflectiveOperationBuilder = new ReflectiveInterpreterOperationBuilder(emfTypeModule);
      patternMatcherModule.addOperationBuilder(emfReflectiveOperationBuilder);

      EGraphInterpreterOperationBuilder eGraphInterpreterOperationBuilder = new EGraphInterpreterOperationBuilder(symbolicGraphConstraintModule);
      patternMatcherModule.addOperationBuilder(eGraphInterpreterOperationBuilder);
      // TODO revert engine.addOperationBuilder(new SpecificationPackageOperationBuilder());
      // 4) Creates the interpretable pattern matcher
      DefaultPattern internalPatternSpecification = patternBuilder.build(foResult.getFirstOrderPattern());
      org.gervarro.democles.interpreter.Pattern patternRuntime = patternMatcherModule.build(internalPatternSpecification);

      ConfigurableMorphismFinder morphismFinder = MatchingFactory.eINSTANCE.createConfigurableMorphismFinder();
      morphismFinder.setPatternSpec(foResult);
      morphismFinder.setMorphismClass(morphismClass);
      ((ConfigurableMorphismFinderImpl) morphismFinder).patternRuntime = patternRuntime;
      return morphismFinder;
-->

}