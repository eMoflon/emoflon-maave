
import org.moflon.maave.tool.maaveutil.MaaveutilFactory;
import org.eclipse.emf.ecore.EObject;
import org.moflon.maave.tool.symbolicgraphs.SymbolicGraphMorphisms.SymbolicGraphMorphismsFactory;
import org.moflon.maave.tool.smt.solverutil.IAttribSolver;
import org.moflon.maave.tool.smt.solverutil.Z3AttribSolver;
import org.moflon.maave.tool.symbolicgraphs.secondorder.matching.MatchingUtils.ConfigurableMorphismClass;
import org.moflon.maave.tool.symbolicgraphs.SymbolicGraphMorphisms.impl.SymbolicGraphMorphismImpl;
import org.moflon.maave.tool.symbolicgraphs.secondorder.matching.MatchingUtils.ConfigurableMorphismClassFactory;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.moflon.maave.tool.symbolicgraphs.secondorder.util.FormulaUtil;
import org.moflon.maave.tool.symbolicgraphs.Datastructures.Mapping;
import org.moflon.maave.tool.symbolicgraphs.SymbolicGraphs.GraphEdge;
import org.moflon.maave.tool.symbolicgraphs.SymbolicGraphs.GraphNode;
import org.moflon.maave.tool.symbolicgraphs.SymbolicGraphs.LabelEdge;
import org.moflon.maave.tool.symbolicgraphs.SymbolicGraphs.LabelNode;
import org.moflon.maave.tool.symbolicgraphs.SymbolicGraphs.SymbolicGraph;
import org.moflon.maave.tool.symbolicgraphs.SymbolicGraphs.SymbolicGraphsFactory;

partial class CategoryUtilImpl {

@members <--

   private boolean isInjectiveForGraphNodes(SymbolicGraphMorphism morphism)
   {
      for (GraphNode gn : morphism.getDom().getGraphNodes())
      {
         if (morphism.getDom().getGraphNodes().stream().anyMatch(x -> x != gn && morphism.imageOf(x) == morphism.imageOf(gn)))
         {
            return false;
         }

      }
      return true;

   }

   private boolean isInjectiveForLabelNodes(SymbolicGraphMorphism morphism)
   {
      for (LabelNode ln : morphism.getDom().getLabelNodes())
      {
         if (morphism.getDom().getLabelNodes().stream().anyMatch(x -> x != ln && morphism.imageOf(x) == morphism.imageOf(ln)))
         {
            return false;
         }

      }
      return true;
   }

   private boolean isInjectiveForGraphEdges(SymbolicGraphMorphism morphism)
   {
      for (GraphEdge ge : morphism.getDom().getGraphEdges())
      {
         if (morphism.getDom().getGraphEdges().stream().anyMatch(x -> x != ge && morphism.imageOf(x) == morphism.imageOf(ge)))
         {
            return false;
         }

      }
      return true;
   }

   private boolean isInjectiveForLabelEdges(SymbolicGraphMorphism morphism)
   {
      for (LabelEdge le : morphism.getDom().getLabelEdges())
      {
         if (morphism.getDom().getLabelEdges().stream().anyMatch(x -> x != le && morphism.imageOf(x) == morphism.imageOf(le)))
         {
            return false;
         }
      }
      return true;
   }

   private boolean isBijectiveForLabelNodes(SymbolicGraphMorphism morphism)
   {
      if (morphism.getDom().getLabelNodes().size() != morphism.getCodom().getLabelNodes().size())
      {
         return false;
      }
      return isInjectiveForLabelNodes(morphism);
   }

   private void reportSimilarURIs(EObject typeA, EObject typeB)
   {
      String uriA = EcoreUtil.getURI(typeA).toString();
      String uriB = EcoreUtil.getURI(typeB).toString();
      if (uriA.equals(uriB))
      {
         throw new RuntimeException("Different EClasses with same URI: " + uriA + "\n" + uriB);
      }

   }
   
-->

@model isValidEGraphMorphism (SymbolicGraphMorphism morphism) <--

      boolean debug = "true".equals(System.getenv("MoflonAaVDebugMode")) ? true : false;
      for (GraphEdge ge : morphism.getDom().getGraphEdges())
      {
         if (!(ge.getType() == morphism.imageOf(ge).getType()))
         {
            if (debug)
            {
               reportSimilarURIs(ge.getType(), morphism.imageOf(ge).getType());
            }
            if (isVerbose())
            {
               System.out.println(" type(" + ge.getDebugId() + ")!=type(f_GE(" + morphism.imageOf(ge).getDebugId() + "))");
            }
            return false;
         }
         if (!(morphism.imageOf(ge.getSource()) == morphism.imageOf(ge).getSource()))
         {
            if (isVerbose())
            {
               System.out.println(" f_GN s_GE (" + ge.getDebugId() + ")=" + morphism.imageOf(ge.getSource()).getDebugId() + " not equal to s_GE f_GE ("
                     + ge.getDebugId() + ")=" + morphism.imageOf(ge).getSource().getDebugId());
            }
            return false;
         }
         if (!(morphism.imageOf(ge.getTarget()) == morphism.imageOf(ge).getTarget()))
         {
            if (isVerbose())
            {
               System.out.println(" f_GN t_GE (" + ge.getDebugId() + ")=" + morphism.imageOf(ge.getTarget()).getDebugId() + " not equal to t_GE f_GE ("
                     + ge.getDebugId() + ")=" + morphism.imageOf(ge).getTarget().getDebugId());
            }
            return false;
         }

      }
      for (LabelEdge le : morphism.getDom().getLabelEdges())
      {
         if (!(le.getType() == morphism.imageOf(le).getType()))
         {

            if (debug)
            {
               reportSimilarURIs(le.getType(), morphism.imageOf(le).getType());
            }
            if (isVerbose())
            {
               System.out.println(" type(" + le.getDebugId() + ")!=type(f_LE(" + morphism.imageOf(le).getDebugId() + "))");
            }
            return false;
         }
         if (!(morphism.imageOf(le.getSource()) == morphism.imageOf(le).getSource()))
         {
            if (isVerbose())
            {
               System.out.println(" f_GN s_LE (" + le.getDebugId() + ")=" + morphism.imageOf(le.getSource()).getDebugId() + " not equal to s_LE f_LE ("
                     + le.getDebugId() + ")=" + morphism.imageOf(le).getSource().getDebugId());
            }
            return false;
         }
         if (!(morphism.imageOf(le.getTarget()) == morphism.imageOf(le).getTarget()))
         {
            if (isVerbose())
            {
               System.out.println(" f_GN t_LE (" + le.getDebugId() + ")=" + morphism.imageOf(le.getTarget()).getLabel() + " not equal to s_LE f_LE ("
                     + le.getDebugId() + ")=" + morphism.imageOf(le).getTarget().getLabel());
            }
            return false;
         }
      }
      for (GraphNode gn : morphism.getDom().getGraphNodes())
      {
         if (!(gn.getType() == morphism.imageOf(gn).getType()))
         {
            if (debug)
            {
               reportSimilarURIs(gn.getType(), morphism.imageOf(gn).getType());
            }
            if (isVerbose())
            {
               System.out.println(" type(" + gn.getDebugId() + ")!=type(f_GN(" + morphism.imageOf(gn).getDebugId() + "))");
            }
            return false;
         }

      }

      for (LabelNode ln : morphism.getDom().getLabelNodes())
      {
         if (!(ln.getType() == morphism.imageOf(ln).getType()))
         {
            if (debug)
            {
               reportSimilarURIs(ln.getType(), morphism.imageOf(ln).getType());
            }
            if (isVerbose())
            {
               System.out.println(" type(" + ln.getLabel() + ")!=type(f_LN(" + morphism.imageOf(ln).getLabel() + "))");
            }
            return false;
         }

      }
      return true;
-->

@model isInjectiveMorphism (SymbolicGraphMorphism morphism) <--

      return isInjectiveForGraphNodes(morphism) && isInjectiveForGraphEdges(morphism) && isInjectiveForLabelEdges(morphism);
-->

@model areSimilarEGraphMorphisms (SymbolicGraphMorphism morA, SymbolicGraphMorphism morB) <--

      if (morA.getDom() != morB.getDom())
      {
         return false;
      }

      if (morA.getCodom() != morB.getCodom())
      {
         return false;
      }
      for (GraphNode elem : morA.getDom().getGraphNodes())
      {
         if (morA.imageOf(elem) != morB.imageOf(elem))
         {
            return false;
         }
      }
      for (GraphEdge elem : morA.getDom().getGraphEdges())
      {
         if (morA.imageOf(elem) != morB.imageOf(elem))
         {
            return false;
         }
      }
      for (LabelEdge elem : morA.getDom().getLabelEdges())
      {
         if (morA.imageOf(elem) != morB.imageOf(elem))
         {
            return false;
         }
      }
      for (LabelNode elem : morA.getDom().getLabelNodes())
      {
         if (morA.imageOf(elem) != morB.imageOf(elem))
         {
            return false;
         }
      }
      return true;
-->

@model isValidSymbGraphMorphism (SymbolicGraphMorphism morphism) <--

      IAttribSolver solver = new Z3AttribSolver();

      boolean result = solver.checkImplication(morphism);
      return result;
-->

@model isOfClassM (SymbolicGraphMorphism morphism) <--

      IAttribSolver solver = new Z3AttribSolver();

      return isInjectiveForGraphNodes(morphism) && isInjectiveForLabelNodes(morphism) && isInjectiveForGraphEdges(morphism)
            && isBijectiveForLabelNodes(morphism) && solver.hasEquivalentFormulas(morphism);
-->

@model areCommuting (Path pathA, Path pathB) <--

      if (pathA.getBeginn() == pathB.getBeginn() && pathA.getEnd() == pathB.getEnd())
      {
         SymbolicGraph begin = pathA.getBeginn();

         SymbolicGraphMorphism morA = pathA.getOver().stream().filter(m -> m.getDom() == begin).findAny().get();
         while (morA.getCodom() != pathA.getEnd())
         {
            SymbolicGraph codomainA = morA.getCodom();
            SymbolicGraphMorphism morA2 = pathA.getOver().stream().filter(m -> m.getDom() == codomainA).findAny().get();
            morA = morA.composeWith(morA2);
         }

         SymbolicGraphMorphism morB = pathB.getOver().stream().filter(m -> m.getDom() == begin).findAny().get();
         while (morB.getCodom() != pathB.getEnd())
         {
            SymbolicGraph codomainB = morB.getCodom();
            SymbolicGraphMorphism morB2 = pathB.getOver().stream().filter(m -> m.getDom() == codomainB).findAny().get();
            morB = morB.composeWith(morB2);
         }
         return this.areSimilarEGraphMorphisms(morA, morB);
      }

      // TODO: implement this method here but do not remove the injection marker 
      throw new UnsupportedOperationException();
-->

@model getInverseMorphism (SymbolicGraphMorphism mor) <--

      SymbolicGraphMorphismImpl reverseMor = (SymbolicGraphMorphismImpl) SymbolicGraphMorphismsFactory.eINSTANCE.createSymbolicGraphMorphism();
      reverseMor.setCodom(mor.getDom());
      reverseMor.setDom(mor.getCodom());

      Mapping<GraphNode> reverseGNMapping = ((SymbolicGraphMorphismImpl) mor).graphNodeMap.getInverseMapping();
      if (reverseGNMapping == null)
         return null;
      Mapping<GraphEdge> reverseGEMapping = ((SymbolicGraphMorphismImpl) mor).graphEdgeMap.getInverseMapping();
      if (reverseGEMapping == null)
         return null;
      Mapping<LabelNode> reverseLNMapping = ((SymbolicGraphMorphismImpl) mor).labelNodeMap.getInverseMapping();
      if (reverseLNMapping == null)
         return null;
      Mapping<LabelEdge> reverseLEMapping = ((SymbolicGraphMorphismImpl) mor).labelEdgeMap.getInverseMapping();
      if (reverseLEMapping == null)
         return null;

      reverseMor.graphNodeMap = reverseGNMapping;
      reverseMor.graphEdgeMap = reverseGEMapping;
      reverseMor.labelNodeMap = reverseLNMapping;
      reverseMor.labelEdgeMap = reverseLEMapping;

      return reverseMor;
-->

@model hasNonEmptySemantic (SymbolicGraph symbolicGraph) <--

      IAttribSolver solver = new Z3AttribSolver();
      Status status = MaaveutilFactory.eINSTANCE.createStatus();
      status.setValid(solver.hasNonEmptySemantic(symbolicGraph));
      return status;
-->

@model createIdentityMorphism (SymbolicGraph graphG) <--

      SymbolicGraphMorphism id = SymbolicGraphMorphismsFactory.eINSTANCE.createSymbolicGraphMorphism();
      id.setDom(graphG);
      id.setCodom(graphG);
      graphG.getGraphNodes().stream().forEach(x -> id.addMapping(x, x));
      graphG.getLabelNodes().stream().forEach(x -> id.addMapping(x, x));
      graphG.getGraphEdges().stream().forEach(x -> id.addMapping(x, x));
      graphG.getLabelEdges().stream().forEach(x -> id.addMapping(x, x));
      return id;
-->

@model copyGraph (SymbolicGraph graphG) <--

      SymbolicGraph copyG = SymbolicGraphsFactory.eINSTANCE.createSymbolicGraph();
      copyG.setName("copyOf" + graphG.getName());
      SymbolicGraphMorphism isoMor = SymbolicGraphMorphismsFactory.eINSTANCE.createSymbolicGraphMorphism();
      isoMor.setCodom(graphG);
      isoMor.setDom(copyG);

      Mapping<GraphNode> reverseGraphNodeMapping = new Mapping<>(graphG.getGraphNodes().size() + 2, 1f);
      for (GraphNode n : graphG.getGraphNodes())
      {
         GraphNode nCopy = EcoreUtil.copy(n);
         copyG.add(nCopy);
         isoMor.addMapping(nCopy, n);
         reverseGraphNodeMapping.addMapping(n, nCopy);
      }

      Mapping<LabelNode> reverseLabelNodeMapping = new Mapping<>(graphG.getLabelNodes().size() + 2, 1f);
      for (LabelNode n : graphG.getLabelNodes())
      {
         LabelNode nCopy = EcoreUtil.copy(n);
         copyG.add(nCopy);
         isoMor.addMapping(nCopy, n);
         reverseLabelNodeMapping.addMapping(n, nCopy);
      }
      for (GraphEdge e : graphG.getGraphEdges())
      {
         GraphEdge eCopy = EcoreUtil.copy(e);
         copyG.add(eCopy);
         eCopy.setSource(reverseGraphNodeMapping.imageOf(e.getSource()));
         eCopy.setTarget(reverseGraphNodeMapping.imageOf(e.getTarget()));
         isoMor.addMapping(eCopy, e);

      }
      for (LabelEdge e : graphG.getLabelEdges())
      {
         LabelEdge eCopy = EcoreUtil.copy(e);
         copyG.add(eCopy);
         eCopy.setSource(reverseGraphNodeMapping.imageOf(e.getSource()));
         eCopy.setTarget(reverseLabelNodeMapping.imageOf(e.getTarget()));
         isoMor.addMapping(eCopy, e);
      }
      FormulaUtil.copyFormulaFromCodomToDom(isoMor);
      return isoMor;
-->

@model getInverseIfIsomorphism (SymbolicGraphMorphism isoMor) <--

      ConfigurableMorphismClassFactory morClassFac = MatchingUtilsFactory.eINSTANCE.createConfigurableMorphismClassFactory();
      ConfigurableMorphismClass morclass = morClassFac.createMorphismClass("B", "B", "B", "B", "<=>");
      if (morclass.isMember(isoMor).isValid() == false)
      {
         return null;
      }

      SymbolicGraphMorphismImpl reverseMor = (SymbolicGraphMorphismImpl) SymbolicGraphMorphismsFactory.eINSTANCE.createSymbolicGraphMorphism();
      reverseMor.setCodom(isoMor.getDom());
      reverseMor.setDom(isoMor.getCodom());

      Mapping<GraphNode> reverseGNMapping = ((SymbolicGraphMorphismImpl) isoMor).graphNodeMap.getInverseMapping();
      if (reverseGNMapping == null)
         return null;
      Mapping<GraphEdge> reverseGEMapping = ((SymbolicGraphMorphismImpl) isoMor).graphEdgeMap.getInverseMapping();
      if (reverseGEMapping == null)
         return null;
      Mapping<LabelNode> reverseLNMapping = ((SymbolicGraphMorphismImpl) isoMor).labelNodeMap.getInverseMapping();
      if (reverseLNMapping == null)
         return null;
      Mapping<LabelEdge> reverseLEMapping = ((SymbolicGraphMorphismImpl) isoMor).labelEdgeMap.getInverseMapping();
      if (reverseLEMapping == null)
         return null;

      reverseMor.graphNodeMap = reverseGNMapping;
      reverseMor.graphEdgeMap = reverseGEMapping;
      reverseMor.labelNodeMap = reverseLNMapping;
      reverseMor.labelEdgeMap = reverseLEMapping;

      return reverseMor;
-->

}