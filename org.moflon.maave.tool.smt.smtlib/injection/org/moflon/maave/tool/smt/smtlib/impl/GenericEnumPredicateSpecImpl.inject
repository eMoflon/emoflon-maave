
import org.moflon.maave.tool.symbolicgraphs.SymbolicGraphs.Predicate;
import java.util.List;
import org.stringtemplate.v4.ST;
import org.eclipse.emf.ecore.EEnum;
import org.eclipse.emf.ecore.EcorePackage;

partial class GenericEnumPredicateSpecImpl {

@members <--

   private static final String EQ_DECLARATION_TEMPLATE = "(define-fun eq<type>((x!1 <type>)(x!2 <type>)) Bool (=  x!1 x!2) )";

   private static final String IS_EQ_DECLARATION_TEMPLATE = "(define-fun isEq<type>((x!1 <type>)(x!2 <type>)(x!3 Bool)) Bool (= (= x!1 x!2) x!3))";

   private static final String EQ_INVOCATION_TEMPLATE = "(eq<type> <var0> <var1>)";

   private static final String IS_EQ_INVOCATION_TEMPLATE = "(isEq<type> <var0> <var1> <var2>)";

   @Override
   public String getSMTPredicateInvocation(Predicate predicate, List<String> variables)
   {
      if (this.matchesPredicate(predicate))
      {

         EEnum type = (EEnum) predicate.getParameters().get(0).getType();

         if (predicate.getParameters().size() == 2)
         {
            ST invocST = new ST(GenericEnumPredicateSpecImpl.EQ_INVOCATION_TEMPLATE, '<', '>');

            invocST.add("type", type.getName());
            invocST.add("var0", variables.get(0));
            invocST.add("var1", variables.get(1));
            String invocation = invocST.render();

            return invocation;
         } else if (predicate.getParameters().size() == 3)
         {
            ST invocST = new ST(GenericEnumPredicateSpecImpl.IS_EQ_INVOCATION_TEMPLATE, '<', '>');

            invocST.add("type", type.getName());
            invocST.add("var0", variables.get(0));
            invocST.add("var1", variables.get(1));
            invocST.add("var2", variables.get(2));
            String invocation = invocST.render();

            return invocation;
         }

      }
      return null;
   }
   
-->

@model matchesPredicate (Predicate predicate) <--

      if (predicate.getSymbol().equals("="))
      {
         if (predicate.getParameters().size() == 2)
         {
            if ((predicate.getParameters().get(0).getType() instanceof EEnum) && (predicate.getParameters().get(1).getType() instanceof EEnum))
            {
               if (predicate.getParameters().get(0).getType() == (predicate.getParameters().get(1).getType()))
               {
                  return true;
               }
            }
         }
      } else if (predicate.getSymbol().equals("=?"))
      {
         if (predicate.getParameters().size() == 3)
         {
            if ((predicate.getParameters().get(0).getType() instanceof EEnum) && (predicate.getParameters().get(1).getType() instanceof EEnum)
                  && predicate.getParameters().get(2).getType() == EcorePackage.eINSTANCE.getEBoolean())
            {
               if (predicate.getParameters().get(0).getType() == (predicate.getParameters().get(1).getType()))
               {
                  return true;
               }
            }
         }
      }

      return false;
-->

@model getSMTDeclaration (Predicate predicate) <--

      if (this.matchesPredicate(predicate))
      {

         EEnum type = (EEnum) predicate.getParameters().get(0).getType();
         if (predicate.getParameters().size() == 2)
         {
            ST declST = new ST(GenericEnumPredicateSpecImpl.EQ_DECLARATION_TEMPLATE, '<', '>');

            declST.add("type", type.getName());
            String declaration = declST.render();

            return declaration;
         } else if (predicate.getParameters().size() == 3)
         {
            ST declST = new ST(GenericEnumPredicateSpecImpl.IS_EQ_DECLARATION_TEMPLATE, '<', '>');

            declST.add("type", type.getName());
            String declaration = declST.render();

            return declaration;
         }

      }
      return null;
-->

}