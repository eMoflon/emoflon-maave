
partial class ConfluenceAnalysisReportImpl {



@model getOverallNrOfMinCtx () <--

      int i=0;  
      for (ConfluenceAnalysisResult   result : this.getConfluenceStates())
      {
         i=i+result.getCpaResult().getNrOfMinContexts();
      }
      return i;
-->

@model getOverallNrOfConsistMinCtx () <--


      int i=0;  
      for (ConfluenceAnalysisResult   result : this.getConfluenceStates())
      {
         i=i+result.getCpaResult().getNrOfConsistentMinContexts();
      }
      return i;
-->

@model printNConf () <--

      StringBuilder sb = new StringBuilder();
      for (ConfluenceAnalysisResult result : this.getConfluenceStates())
      {
         if (result.isValid() == false)
         {
            sb.append("========================================================================================");
            sb.append(result.toString());
         }
      }
      return sb.toString();
-->

@model getOverallNrOfCritPairs () <--

      int i=0;  
      for (ConfluenceAnalysisResult   result : this.getConfluenceStates())
      {
         i=i+result.getCpaResult().getNrOfCritPairs();
      }
      return i;
-->

@model toString () <--

      StringBuilder sb = new StringBuilder();
      for (ConfluenceAnalysisResult result : this.getConfluenceStates())
      {
         sb.append("========================================================================================");
         sb.append(result.toString());
      }
      return sb.toString();
-->

@model getOverallNrOfNonConfluentCritPairs () <--

      int i=0;  
      for (ConfluenceAnalysisResult   result : this.getConfluenceStates())
      {
         i=i+result.getNrOfNonConfluentCriticalPairs();
      }
      return i;
-->

}