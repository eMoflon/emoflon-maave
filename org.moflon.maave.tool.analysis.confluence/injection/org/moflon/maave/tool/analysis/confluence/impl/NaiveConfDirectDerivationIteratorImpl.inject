
import org.moflon.maave.tool.graphtransformation.DirectDerivation;
import org.moflon.maave.tool.symbolicgraphs.SymbolicGraphMorphisms.SymbolicGraphMorphismsFactory;
import org.moflon.maave.tool.symbolicgraphs.SymbolicGraphs.EGraphElement;
import org.moflon.maave.tool.symbolicgraphs.secondorder.matching.ConfigurableMorphismFinder;
import org.moflon.maave.tool.symbolicgraphs.secondorder.matching.MatchingFactory;
import org.moflon.maave.tool.symbolicgraphs.secondorder.matching.MorphismFinderFactory;
import org.moflon.maave.tool.symbolicgraphs.secondorder.matching.MorphismsSet;
import org.moflon.maave.tool.symbolicgraphs.secondorder.matching.MatchingUtils.MatchingUtilsFactory;
import org.moflon.maave.tool.symbolicgraphs.secondorder.matching.MatchingUtils.ConfigurableMorphismClass;
import org.moflon.maave.tool.symbolicgraphs.secondorder.matching.MatchingUtils.ConfigurableMorphismClassFactory;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;
import java.util.stream.Collectors;

partial class NaiveConfDirectDerivationIteratorImpl {

@members <--

   @SuppressWarnings({ "unchecked", "rawtypes" })
   private void initDirectDerivations()
   {
      SymbolicGraph graphL = production.getLeft().getCodom();
      SymbolicGraph graphP1 = morN_P1.getCodom();
      MorphismFinderFactory morFinderFac = MatchingFactory.eINSTANCE.createMorphismFinderFactory();
      ConfigurableMorphismFinder morFinderForL = morFinderFac.createMorphismFinder(graphL, gts.getMatchMorphismClass());
      SymbolicGraphMorphism emptyMorL_P1 = SymbolicGraphMorphismsFactory.eINSTANCE.createSymbolicGraphMorphism();
      emptyMorL_P1.setDom(graphL);
      emptyMorL_P1.setCodom(graphP1);
      MorphismsSet morSetL_G = morFinderForL.getAllMorphisms(emptyMorL_P1);
      for (SymbolicGraphMorphism match : morSetL_G.getMorphisms())
      {

         derTupleList.add(new Tuple(gts.getDirectDerivationBuilder().deriveDirectDerivation(production, match, gts, false), null));

      }

   }

   private void calculateAllMorN_P3()
   {
      ConfigurableMorphismClassFactory morFac = MatchingUtilsFactory.eINSTANCE.createConfigurableMorphismClassFactory();
      ConfigurableMorphismClass morClassForY = morFac.createMorphismClass("I", "I", "I", "I", "*");
      MorphismFinderFactory morFinderFac = MatchingFactory.eINSTANCE.createMorphismFinderFactory();
      ConfigurableMorphismFinder morFinderForN = morFinderFac.createMorphismFinder(morN_P1.getDom(), morClassForY);

      for (Tuple<DirectDerivation, SymbolicGraphMorphism> tuple : derTupleList)
      {
         DirectDerivation der = tuple.getElemA();
         SymbolicGraphMorphism emptyMorN_E3 = SymbolicGraphMorphismsFactory.eINSTANCE.createSymbolicGraphMorphism();
         emptyMorN_E3.setDom(morN_P1.getDom());
         emptyMorN_E3.setCodom(der.getLeft().getDom());
         Iterator<SymbolicGraphMorphism> morN_E3Iterator = morFinderForN.getAllMorphisms(emptyMorN_E3).getMorphisms().iterator();
         boolean foundValidY3 = false;
         while (morN_E3Iterator.hasNext() && foundValidY3 == false)
         {
            SymbolicGraphMorphism morN_E3 = morN_E3Iterator.next();
            if (checkCommuting(morN_P1, morN_E3, der.getLeft()))
            {
               tuple.setElemB(morN_E3.composeWith(der.getRight()));
               foundValidY3 = true;
            }
         }
      }

   }

   private boolean checkCommuting(SymbolicGraphMorphism morN_P1, SymbolicGraphMorphism morN_E3, SymbolicGraphMorphism morE3_P1)
   {
      for (Object obj : morN_P1.getDom().getAllElements())
      {
         EGraphElement elem = (EGraphElement) obj;
         if (!(morN_P1.imageOf(elem) == morE3_P1.imageOf(morN_E3.imageOf(elem))))
         {
            return false;
         }
      }
      return true;
   }

   private SymbGTRule production;

   private SymbolicGraphMorphism morN_P1;

   private GraphTransformationSystem gts;

   private List<Tuple<DirectDerivation, SymbolicGraphMorphism>> derTupleList = new LinkedList<Tuple<DirectDerivation, SymbolicGraphMorphism>>();

   private Iterator<Tuple<DirectDerivation, SymbolicGraphMorphism>> derTupleListIterator;

   private class Tuple<T, E>
   {
      private T elemA;

      private E elemB;

      public Tuple(T elemA, E elemB)
      {
         super();
         this.elemA = elemA;
         this.elemB = elemB;
      }

      public T getElemA()
      {
         return elemA;
      }

      
      public E getElemB()
      {
         return elemB;
      }

      public void setElemB(E elemB)
      {
         this.elemB = elemB;
      }
   }
   
-->

@model reset () <--

      derTupleListIterator = derTupleList.iterator();
-->

@model getNext () <--

      if (derTupleListIterator.hasNext())
      {
         return derTupleListIterator.next().elemB;
      } else
      {
         return null;
      }
-->

@model init (SymbolicGraph graphG, SymbGTRule production, SymbolicGraphMorphism morN_P, GraphTransformationSystem gts) <--

      this.production = production;
      this.morN_P1 = morN_P;
      this.gts = gts;

      initDirectDerivations();
      calculateAllMorN_P3();
      derTupleList = (List<Tuple<DirectDerivation, SymbolicGraphMorphism>>) derTupleList.stream().filter(t -> t.getElemB() != null)
            .collect(Collectors.toList());
      derTupleListIterator = derTupleList.iterator();
-->

}