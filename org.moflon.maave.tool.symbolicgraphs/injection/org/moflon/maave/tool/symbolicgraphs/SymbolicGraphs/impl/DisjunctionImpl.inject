
import org.moflon.maave.tool.symbolicgraphs.SymbolicGraphs.SymbolicGraphsFactory;
import java.util.Optional;

partial class DisjunctionImpl {



@model getConstant (String value, EDataType type) <--

      Optional<Constant> optConst = this.getConstants().stream().filter(c -> c.getInterpretation().equals(value) && c.getType().equals(type)).findFirst();
      if (optConst.isPresent())
      {
         return optConst.get();
      }
      Constant newConstant = SymbolicGraphsFactory.eINSTANCE.createConstant();
      newConstant.setInterpretation(value);
      newConstant.setType(type);
      newConstant.setFormula(this);
      return newConstant;
-->

@model toString () <--

      StringBuilder sb = new StringBuilder();

      if (this.getQuantifier() != null)
      {
         sb.append(this.getQuantifier().toString());
      }
      if (this.getOf().size() > 0)
      {
         for (Conjunction conj : this.getOf())
         {
            sb.append(conj.toString());
            sb.append(" OR ");
         }
         sb.delete(sb.length() - 4, sb.length() - 1);
      }

      return sb.toString();
-->

}