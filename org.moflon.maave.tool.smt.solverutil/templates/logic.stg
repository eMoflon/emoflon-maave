group logic;

conjunction(predicates)::=<<<if(rest(predicates))>(and <predicates:{pred|<pred> }>)<else><predicates:{pred|<pred> }><endif>
>>

disjunction(conjunctions)::=<<<if(rest(conjunctions))>(or <conjunctions:{conj|<conj> }>)<else><conjunctions:{conj|<conj> }><endif> 
>>
disjunctionExists(varDefs,conjunctions)::=<<(exists(<varDefs:{varDef|<varDef> }>) <disjunction(conjunctions)>) 
>>


implication(premise, conclusion)::=<<
		(=> 
			<premise> 
			<conclusion>
		)
>>

biImplication(term1, term2)::=<<
		(= 
			<term1> 
			<term2>
		)
>>

dis(premise, conclusion)::=<<(assert	
	(not 
		(=> 
			<premise> 
			<conclusion>
		)
	)
)
>>

operation(term1, term2, op)
::=<<
		(<op> 
			<term1> 
			<term2>
		)
>>

checkUnsat(sortDecl,varDecls,funcDefs,term)::=<<
(set-option :timeout 60000)
<sortDecl;separator="\n">
<varDecls;separator="\n">
<funcDefs;separator="\n">

(assert	
	(not 
	<term>
	)
)
(check-sat)
;(check-sat-using ufnia)
;(check-sat-using (then simplify smt))
;(check-sat-using smt)
>>

checkSat(sortDecl,varDecls,funcDefs,term)::=<<
(set-option :timeout 30000)
<sortDecl;separator="\n">
<varDecls;separator="\n">
<funcDefs;separator="\n">
(assert	
<term>
)
(check-sat)
>>