#*
 * Democles, Declarative Model Query Framework for Monitoring Heterogeneous Embedded Systems
 * Copyright (C) 2010-2012  Gergely Varro
 * 
 *  This program is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *  
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *  
 *  You should have received a copy of the GNU General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *  
 * Contributors:
 * 		Gergely Varro <gervarro@cs.bme.hu> - initial API and implementation and/or initial documentation
 *###
#if (${package})package ${package};

#end
#if ($import.getImportList().size() > 0)
#foreach ($importElement in $import.getImportList())
import ${importElement};
#end

#end
public class ${pattern.getClassName()} extends ${import.getImportedName("org.gervarro.democles.common.PatternMatcher")}<${import.getImportedName($pattern.getFullyQualifiedDataFrameName())}> {
	private final ${import.getImportedName("java.util.List")}<${import.getImportedName($pattern.getFullyQualifiedBodyName())}> bodies = 
		new ${import.getImportedName("java.util.ArrayList")}<${import.getImportedName($pattern.getFullyQualifiedBodyName())}>(${pattern.getBodies().size()});

	public ${pattern.getClassName()}() {
		super("${pattern.getName()}");
#foreach($body in $pattern.getBodies())
		bodies.add(new ${import.getImportedName($body.getFullyQualifiedClassName())}(this));
#end
	}
	
	public final ${import.getImportedName($pattern.getFullyQualifiedDataFrameName())} matchSingle(#foreach ($variable in $pattern.getInternalSymbolicParameters())#if (${velocityCount} > 0), #end${import.getImportedName($variable.getType().getTypeName())} ${variable.getLowerCaseName($variable.getParameters().get(0).getSpecification().getName())}#end) {
		${import.getImportedName($pattern.getFullyQualifiedDataFrameName())} initial = new ${import.getImportedName($pattern.getFullyQualifiedDataFrameName())}(#foreach ($variable in $pattern.getInternalSymbolicParameters())#if (${velocityCount} > 0), #end${variable.getLowerCaseName($variable.getParameters().get(0).getSpecification().getName())}#end);
		return matchSingle(initial);
	}
	
	public final Iterable<${import.getImportedName($pattern.getFullyQualifiedDataFrameName())}> matchAll(#foreach ($variable in $pattern.getInternalSymbolicParameters())#if (${velocityCount} > 0), #end${import.getImportedName($variable.getType().getTypeName())} ${variable.getLowerCaseName($variable.getParameters().get(0).getSpecification().getName())}#end) {
		${import.getImportedName($pattern.getFullyQualifiedDataFrameName())} initial = new ${import.getImportedName($pattern.getFullyQualifiedDataFrameName())}(#foreach ($variable in $pattern.getInternalSymbolicParameters())#if (${velocityCount} > 0), #end${variable.getLowerCaseName($variable.getParameters().get(0).getSpecification().getName())}#end);
		return matchAll(initial);
	}

	public ${import.getImportedName($pattern.getFullyQualifiedDataFrameName())} createDataFrame() {
		return new ${import.getImportedName($pattern.getFullyQualifiedDataFrameName())}();
	}

	protected final ${import.getImportedName($pattern.getFullyQualifiedDataFrameName())} matchSingle(${import.getImportedName($pattern.getFullyQualifiedDataFrameName())} input, ${import.getImportedName("org.gervarro.democles.common.Adornment")} adornment) {
#foreach($adornment in $adornments)#if (${velocityCount} > 0)else #end
		if (#foreach ($binding in $adornment)#if (${velocityCount} > 0) && #{end}adornment.get(${velocityCount}) == ${import.getImportedName("org.gervarro.democles.common.Adornment")}.${adornment.getClass().getBindingConstant($binding)}#{end}) {
			// Perform PM on all pattern bodies until a solution is found
			for (${import.getImportedName($pattern.getFullyQualifiedBodyName())} body : bodies) {
				// Prepare the data frame for the pattern body
				${import.getImportedName($pattern.getFullyQualifiedDataFrameName())} match = body.matchSingle${adornment}(input);
				if (match != null) {
					return match;
				}
			}
			return null;
		}#end else {
			throw new RuntimeException("Unsupported adornment " + adornment);
		}
	}
	
	protected final Iterable<${import.getImportedName($pattern.getFullyQualifiedDataFrameName())}> matchAll(${import.getImportedName($pattern.getFullyQualifiedDataFrameName())} input, ${import.getImportedName("org.gervarro.democles.common.Adornment")} adornment) {
		${import.getImportedName("java.util.List")}<${import.getImportedName($pattern.getFullyQualifiedDataFrameName())}> result = 
			new ${import.getImportedName("java.util.LinkedList")}<${import.getImportedName($pattern.getFullyQualifiedDataFrameName())}>();
#foreach($adornment in $adornments)#if (${velocityCount} > 0)else #end
		if (#foreach ($binding in $adornment)#if (${velocityCount} > 0) && #{end}adornment.get(${velocityCount}) == ${import.getImportedName("org.gervarro.democles.common.Adornment")}.${adornment.getClass().getBindingConstant($binding)}#{end}) {
			// Perform PM on all pattern bodies
			for (${import.getImportedName($pattern.getFullyQualifiedBodyName())} body : bodies) {
				// Prepare the data frame for the pattern body
				for (${import.getImportedName($pattern.getFullyQualifiedDataFrameName())} match : body.matchAll${adornment}(input)) {
					result.add(match);
				}
			}
		}#end else {
			throw new RuntimeException("Unsupported adornment " + adornment);
		}
		return result;
	}
}